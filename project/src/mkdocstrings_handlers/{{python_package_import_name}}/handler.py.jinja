"""This module implements a handler for the {{ language|title }} language."""

from __future__ import annotations

from typing import Any

from markdown import Markdown
from markupsafe import Markup
from mkdocs.exceptions import PluginError
from mkdocstrings.handlers.base import BaseHandler, CollectionError, CollectorItem
from mkdocstrings.loggers import get_logger

logger = get_logger(__name__)


class {{ language.title().replace(" ", "") }}Handler(BaseHandler):
    """The {{ language.title().replace(" ", "") }} handler class.

    Attributes:
        domain: The cross-documentation domain/language for this handler.
        enable_inventory: Whether this handler is interested in enabling the creation
            of the `objects.inv` Sphinx inventory file.
        fallback_theme: The theme to fallback to.
        fallback_config: The configuration used to collect item during autorefs fallback.
        default_config: The default configuration option,
            see [`default_config`][mkdocstrings_handlers.{{ python_package_import_name }}.handler.{{ language.title().replace(" ", "") }}Handler.default_config].
    """

    domain: str = "{{ language|lower }}"  # to match Sphinx's default domain
    enable_inventory: bool = False
    fallback_theme = "material"
    fallback_config: dict = {"fallback": True}
    default_config: dict = {
        "show_root_heading": False,
        "show_root_toc_entry": True,
        "heading_level": 2,
    }
    """The default configuration options.

    Option | Type | Description | Default
    ------ | ---- | ----------- | -------
    **`show_root_heading`** | `bool` | Show the heading of the object at the root of the documentation tree. | `False`
    **`show_root_toc_entry`** | `bool` | If the root heading is not shown, at least add a ToC entry for it. | `True`
    **`show_source`** | `bool` | Show the source code of this object. | `True`
    **`heading_level`** | `int` | The initial heading level to use. | `2`
    """  # noqa: E501

    def collect(self, identifier: str, config: dict) -> CollectorItem:  # noqa: D102
        """Collect data given an identifier and selection configuration.

        In the implementation, you typically call a subprocess that returns JSON, and load that JSON again into
        a Python dictionary for example, though the implementation is completely free.

        Arguments:
            identifier: An identifier that was found in a markdown document for which to collect data. For example,
                in Python, it would be 'mkdocstrings.handlers' to collect documentation about the handlers module.
                It can be anything that you can feed to the tool of your choice.
            config: All configuration options for this handler either defined globally in `mkdocs.yml` or
                locally overridden in an identifier block by the user.

        Returns:
            Anything you want, as long as you can feed it to the renderer's `render` method.
        """
        raise CollectionError("Implement me!")

    def render(self, data: CollectorItem, config: dict) -> str:  # noqa: D102
        """Render a template using provided data and configuration options.

        Arguments:
            data: The data to render that was collected above in `collect()`.
            config: All configuration options for this handler either defined globally in `mkdocs.yml` or
                locally overridden in an identifier block by the user.

        Returns:
            The rendered template as HTML.
        """
        raise PluginError("Implement me!")

        # final_config = {**self.default_config, **config}
        # heading_level = final_config["heading_level"]
        # template = self.env.get_template(f"{data...}.html")
        # return template.render(
        #     **{"config": final_config, data...: data, "heading_level": heading_level, "root": True},
        # )

    def update_env(self, md: Markdown, config: dict) -> None:  # noqa: D102 (ignore missing docstring)
        """Update the Jinja environment with any custom settings/filters/options for this handler.

        Arguments:
            md: The Markdown instance. Useful to add functions able to convert Markdown into the environment filters.
            config: Configuration options for `mkdocs` and `mkdocstrings`, read from `mkdocs.yml`. See the source code
                of [mkdocstrings.plugin.MkdocstringsPlugin.on_config][] to see what's in this dictionary.
        """
        super().update_env(md, config) # Add some mkdocstrings default filters such as highlight and convert_markdown
        self.env.trim_blocks = True
        self.env.lstrip_blocks = True
        self.env.keep_trailing_newline = False
        self.env.filters["crossref"] = self.do_crossref

    def do_crossref(self, path: str, brief: bool = True) -> Markup:
        """Filter to create cross-references.

        Parameters:
            path: The path to link to.
            brief: Show only the last part of the path, add full path as hover.

        Returns:
            Markup text.
        """
        full_path = path
        if brief:
            path = full_path.split(".")[-1]
        return Markup("<span data-autorefs-optional-hover={full_path}>{path}</span>").format(
            full_path=full_path, path=path
        )


def get_handler(
    theme: str,  # noqa: W0613 (unused argument config)
    custom_templates: str | None = None,
    config_file_path: str | None = None,
    **config: Any,
) -> {{ language.title().replace(" ", "") }}Handler:
    """Simply return an instance of `{{ language.title().replace(" ", "") }}Handler`.

    Arguments:
        theme: The theme to use when rendering contents.
        custom_templates: Directory containing custom templates.
        config_file_path: The MkDocs configuration file path.
        **config: Configuration passed to the handler.

    Returns:
        An instance of the handler.
    """
    return {{ language.title().replace(" ", "") }}Handler(
        handler="{{ language|lower }}",
        theme=theme,
        custom_templates=custom_templates,
        config_file_path=config_file_path,
    )
